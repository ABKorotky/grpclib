import os
import sys

from contextlib import contextmanager
from collections import namedtuple

from google.protobuf.compiler.plugin_pb2 import CodeGeneratorRequest
from google.protobuf.compiler.plugin_pb2 import CodeGeneratorResponse

from .. import handler
from ..handler import Method


SUFFIX = handler.__name__.split('.')[0]


class Buffer:

    def __init__(self):
        self._lines = []
        self._indent = 0

    def add(self, string, *args, **kwargs):
        self._lines.append(' ' * self._indent * 4 +
                           string.format(*args, **kwargs))

    @contextmanager
    def indent(self):
        self._indent += 1
        try:
            yield
        finally:
            self._indent -= 1

    def content(self):
        return '\n'.join(self._lines)


def render(proto_file, package, imports, services):
    buf = Buffer()
    buf.add('# Generated by the protocol buffer compiler.  DO NOT EDIT!')
    buf.add('# source: {}', proto_file)
    buf.add('# plugin: {}', __name__)
    buf.add('')
    buf.add('from {} import {}', handler.__name__, Method.__name__)
    buf.add('')
    for mod in imports:
        buf.add('import {}', mod)
    for service in services:
        buf.add('')
        buf.add('')
        buf.add('class {}:', service.name)
        with buf.indent():
            buf.add('__service__ = \'{}.{}\'', package, service.name)
            buf.add('__methods__ = set()')
            for method in service.methods:
                buf.add('')
                buf.add('{} = \\', method.name)
                with buf.indent():
                    buf.add('Method(\'{}\',', method.name)
                    buf.add('       {},', method.input_type)
                    buf.add('       {})', method.output_type)
                buf.add('__methods__.add({})', method.name)
    buf.add('')
    return buf.content()


Service = namedtuple('Service', 'name methods')


def _get_proto(request, name):
    return next(f for f in request.proto_file if f.name == name)


def _proto2py(proto_name):
    return proto_name.replace('/', '.')[:-len('.proto')] + '_pb2'


def main():
    with os.fdopen(sys.stdin.fileno(), 'rb') as inp:
        request = CodeGeneratorRequest.FromString(inp.read())

    types_map = {
        '.{}.{}'.format(pf.package, mt.name): '.'.join((_proto2py(pf.name),
                                                        mt.name))
        for pf in request.proto_file
        for mt in pf.message_type
    }

    response = CodeGeneratorResponse()
    for file_to_generate in request.file_to_generate:
        proto_file = _get_proto(request, file_to_generate)

        imports = [_proto2py(dep)
                   for dep in list(proto_file.dependency) + [file_to_generate]]

        services = []
        for service in proto_file.service:
            methods = []
            for method in service.method:
                methods.append(Method(
                    method.name,
                    types_map[method.input_type],
                    types_map[method.output_type],
                ))
            services.append(Service(service.name,
                                    methods=methods))

        out = response.file.add()
        out.name = file_to_generate.replace('.proto',
                                            '_pb2_{}.py'.format(SUFFIX))
        out.content = render(proto_file=proto_file.name,
                             package=proto_file.package,
                             imports=imports,
                             services=services)

    with os.fdopen(sys.stdout.fileno(), 'wb') as out:
        out.write(response.SerializeToString())
